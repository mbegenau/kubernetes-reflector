name: Pipeline

on:
  push:
    paths:
      - "src/**"
      - ".github/workflows/**"
  pull_request:
    paths:
      - "src/**"
      - ".github/workflows/**"

env:
  version: 6.1.${{github.run_number}}
  imageRepository: "emberstack/kubernetes-reflector"
  DOCKER_CLI_EXPERIMENTAL: "enabled"


jobs:
  ci:
    name: CI
    runs-on: ubuntu-latest
    steps:

      - name: tools - helm - install
        uses: azure/setup-helm@v3



      - name: checkout
        uses: actions/checkout@v3

      - name: artifacts - prepare directories
        run: |
          mkdir -p .artifacts/helm
          mkdir -p .artifacts/kubectl

      - name: helm - import README
        run: cp README.md src/helm/reflector/README.md

      - name: helm - package chart
        run: helm package --destination .artifacts/helm --version ${{env.version}} --app-version ${{env.version}} src/helm/reflector

      - name: helm - template chart
        run: helm template --namespace kube-system reflector .artifacts/helm/reflector-${{env.version}}.tgz > .artifacts/kubectl/reflector-${{env.version}}.yaml

      - name: "artifacts - upload - helm chart"
        uses: actions/upload-artifact@v3
        with:
          name: helm
          path: .artifacts/helm

      - name: "artifacts - upload - kubectl manifests"
        uses: actions/upload-artifact@v3
        with:
          name: kubectl
          path: .artifacts/kubectl

      - name: "docker - build PR"
        if: github.event_name == 'pull_request'
        run: |
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          docker buildx create --name builder --driver docker-container --use
          docker buildx inspect --bootstrap
          docker buildx build --platform linux/amd64 -t ${{env.imageRepository}}:build-${{env.version}}-amd64   -f src/ES.Kubernetes.Reflector/Dockerfile src/
          docker buildx build --platform linux/arm   -t ${{env.imageRepository}}:build-${{env.version}}-arm32v7 -f src/ES.Kubernetes.Reflector/Dockerfile src/
          docker buildx build --platform linux/arm64 -t ${{env.imageRepository}}:build-${{env.version}}-arm64v8 -f src/ES.Kubernetes.Reflector/Dockerfile src/

      - name: tools - docker - login
        if: github.event_name == 'push'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.ES_DOCKERHUB_USERNAME }}
          password: ${{ secrets.ES_DOCKERHUB_PAT }}


      - name: "docker - build and publish"
        if: github.event_name == 'push'
        run: |
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          docker buildx create --name builder --driver docker-container --use
          docker buildx inspect --bootstrap
          docker buildx build --push --platform linux/amd64 -t ${{env.imageRepository}}:build-${{env.version}}-amd64   -f src/ES.Kubernetes.Reflector/Dockerfile src/
          docker buildx build --push --platform linux/arm   -t ${{env.imageRepository}}:build-${{env.version}}-arm32v7 -f src/ES.Kubernetes.Reflector/Dockerfile src/
          docker buildx build --push --platform linux/arm64 -t ${{env.imageRepository}}:build-${{env.version}}-arm64v8 -f src/ES.Kubernetes.Reflector/Dockerfile src/
          docker pull ${{env.imageRepository}}:build-${{env.version}}-amd64
          docker pull ${{env.imageRepository}}:build-${{env.version}}-arm32v7
          docker pull ${{env.imageRepository}}:build-${{env.version}}-arm64v8
          docker manifest create  ${{env.imageRepository}}:build-${{env.version}} ${{env.imageRepository}}:build-${{env.version}}-amd64  ${{env.imageRepository}}:build-${{env.version}}-arm32v7  ${{env.imageRepository}}:build-${{env.version}}-arm64v8
          docker manifest inspect ${{env.imageRepository}}:build-${{env.version}}
          docker manifest push    ${{env.imageRepository}}:build-${{env.version}}

  cd:
    name: CD
    needs: ci
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: tools - helm - install
        uses: azure/setup-helm@v3

      - name: tools - docker - login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.ES_DOCKERHUB_USERNAME }}
          password: ${{ secrets.ES_DOCKERHUB_PAT }}

      - name: artifacts - download - helm chart
        uses: actions/download-artifact@v3
        with:
          name: helm
          path: .artifacts/helm

      - name: artifacts - download - kubectl manifests
        uses: actions/download-artifact@v3
        with:
          name: kubectl
          path: .artifacts/kubectl

      - name: "docker - tag and push"
        run: |
          docker pull ${{env.imageRepository}}:build-${{env.version}}-amd64
          docker pull ${{env.imageRepository}}:build-${{env.version}}-arm32v7
          docker pull ${{env.imageRepository}}:build-${{env.version}}-arm64v8
          docker manifest create  ${{env.imageRepository}}:${{env.version}} ${{env.imageRepository}}:build-${{env.version}}-amd64 ${{env.imageRepository}}:build-${{env.version}}-arm32v7 ${{env.imageRepository}}:build-${{env.version}}-arm64v8
          docker manifest create  ${{env.imageRepository}}:latest               ${{env.imageRepository}}:build-${{env.version}}-amd64 ${{env.imageRepository}}:build-${{env.version}}-arm32v7 ${{env.imageRepository}}:build-${{env.version}}-arm64v8
          docker manifest push    ${{env.imageRepository}}:${{env.version}}
          docker manifest push    ${{env.imageRepository}}:latest
          docker manifest push    ${{env.imageRepository}}:${{env.version}}
          docker manifest push    ${{env.imageRepository}}:latest
          docker tag  ${{env.imageRepository}}:build-${{env.version}}-amd64     ${{env.imageRepository}}:${{env.version}}-amd64
          docker tag  ${{env.imageRepository}}:build-${{env.version}}-arm32v7   ${{env.imageRepository}}:${{env.version}}-arm32v7
          docker tag  ${{env.imageRepository}}:build-${{env.version}}-arm64v8   ${{env.imageRepository}}:${{env.version}}-arm64v8
          docker push ${{env.imageRepository}}:${{env.version}}-amd64
          docker push ${{env.imageRepository}}:${{env.version}}-arm32v7
          docker push ${{env.imageRepository}}:${{env.version}}-arm64v8

      - name: github - checkout - helm-charts
        uses: actions/checkout@v3
        with:
          repository: emberstack/helm-charts
          token:  ${{ secrets.ES_GITHUB_PAT }}
          path: helm-charts


      - name: github - publish - chart
        run: |
          mkdir -p helm-charts/charts
          cp .artifacts/helm/reflector-${{env.version}}.tgz  helm-charts/charts

          cd helm-charts
          rm -f index.yaml
          helm repo index ./

          git config user.name "Romeo Dumitrescu"
          git config user.email "5931333+winromulus@users.noreply.github.com"
          git add .
          git status
          git commit -m "Added reflector-${{env.version}}.tgz"
          git push

      - name: github - release - set manifest name
        run: |
          mkdir -p github 
          cp .artifacts/kubectl/reflector-${{env.version}}.yaml github/reflector.yaml

      - name: github - create release
        uses: softprops/action-gh-release@v1
        with:
          repository: emberstack/kubernetes-reflector
          tag_name: v${{env.version}}
          body: The release process is automated.
          token: ${{ secrets.ES_GITHUB_PAT }}
          files: |
            github/reflector.yaml
            
